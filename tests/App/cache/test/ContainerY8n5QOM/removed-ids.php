<?php

return array(
    'Psr\\Container\\ContainerInterface' => true,
    'Psr\\Log\\LoggerInterface' => true,
    'Symfony\\Component\\DependencyInjection\\ContainerInterface' => true,
    'Symfony\\Component\\EventDispatcher\\EventDispatcherInterface' => true,
    'Symfony\\Component\\HttpFoundation\\RequestStack' => true,
    'Symfony\\Component\\HttpKernel\\Config\\FileLocator' => true,
    'Symfony\\Component\\HttpKernel\\HttpKernelInterface' => true,
    'Symfony\\Component\\HttpKernel\\KernelInterface' => true,
    'Symfony\\Component\\Routing\\RequestContext' => true,
    'Symfony\\Component\\Routing\\RouterInterface' => true,
    'cache_clearer' => true,
    'cache_warmer' => true,
    'config_cache_factory' => true,
    'controller_resolver' => true,
    'file_locator' => true,
    'kernel_cache_clearer' => true,
    'monolog.activation_strategy.not_found' => true,
    'monolog.formatter.chrome_php' => true,
    'monolog.formatter.gelf_message' => true,
    'monolog.formatter.html' => true,
    'monolog.formatter.json' => true,
    'monolog.formatter.line' => true,
    'monolog.formatter.loggly' => true,
    'monolog.formatter.logstash' => true,
    'monolog.formatter.normalizer' => true,
    'monolog.formatter.scalar' => true,
    'monolog.formatter.wildfire' => true,
    'monolog.handler.fingers_crossed.error_level_activation_strategy' => true,
    'monolog.handler.main' => true,
    'monolog.handler.null_internal' => true,
    'monolog.logger' => true,
    'monolog.logger_prototype' => true,
    'monolog.processor.psr_log_message' => true,
    'response_listener' => true,
    'router' => true,
    'router.request_context' => true,
    'router_cache_warmer' => true,
    'router_listener' => true,
    'routing.loader' => true,
    'routing.loader.directory' => true,
    'routing.loader.php' => true,
    'routing.loader.service' => true,
    'routing.loader.xml' => true,
    'routing.loader.yml' => true,
    'routing.resolver' => true,
    'service_controller_resolver' => true,
    'service_locator.VMvumRf' => true,
);
